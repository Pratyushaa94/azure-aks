name: AKS Infra + Components

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

      # Create backend infra (storage + container)
      - name: Ensure Terraform backend infra exists
        run: |
          az group create --name my-rg --location eastus
          az storage account create \
            --name formconsole12345 \
            --resource-group my-rg \
            --sku Standard_LRS \
            --encryption-services blob || true
          az storage container create \
            --name tfstate \
            --account-name formconsole12345 || true

      # Init with backend.conf
      - name: Terraform Init
        run: terraform init -backend-config=backend.conf

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

      # ✅ Install tools
      - name: Install kubectl, Helm, jq
        run: |
          sudo az aks install-cli
          curl -fsSL https://get.helm.sh/helm-v3.15.2-linux-amd64.tar.gz | tar -xz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          sudo apt-get install -y jq

      # ✅ Get AKS credentials after Terraform apply
      - name: Get AKS Credentials
        run: |
          CLUSTER_NAME=$(terraform output -raw aks_cluster_name)
          RG_NAME=$(terraform output -raw resource_group_name)
          az aks get-credentials --resource-group $RG_NAME --name $CLUSTER_NAME --overwrite-existing

      # ✅ Test kubectl
      - name: Verify kubectl
        run: kubectl get nodes

      # ✅ Example: Install NGINX ingress controller with Helm
      - name: Install Ingress Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx --create-namespace

      # ✅ Example: Verify pods
      - name: Verify Ingress Pods
        run: kubectl get pods -n ingress-nginx
