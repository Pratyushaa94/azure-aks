name: Terraform AKS + ArgoCD + Helm Deployment.

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  RESOURCE_GROUP: aks-dev-rg
  CLUSTER_NAME: myAKSCluster
  HELM_CHART_REPO: https://charts.bitnami.com/bitnami
  APP_NAMESPACE: my-app
  APP_RELEASE_NAME: my-sample-app

jobs:
  terraform-deploy:
    name: Deploy AKS, ArgoCD, and Helm App
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Azure Login
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3Ô∏è‚É£ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
      - name: Terraform Init
        run: |
            terraform init \
                    -backend-config="resource_group_name=my-rg" \
                   -backend-config="storage_account_name=thisstgformconsole" \
                    -backend-config="container_name=tfstate" \
                    -backend-config="key=aks-cluster.terraform.tfstate" \
                  -backend-config="subscription_id=${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}" \
                   -backend-config="client_id=${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}" \
                    -backend-config="client_secret=${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}" \
                     -backend-config="tenant_id=${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}"

      # 5Ô∏è‚É£ Terraform Validate, Plan, Apply
      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars"

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file="terraform.tfvars"

      # 6Ô∏è‚É£ Install CLI tools: kubectl, helm, jq
      - name: Install CLI Tools
        run: |
          sudo az aks install-cli
          curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          sudo apt-get update && sudo apt-get install -y jq

      # 7Ô∏è‚É£ Get AKS Credentials
      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group $RESOURCE_GROUP \
            --name $CLUSTER_NAME \
            --overwrite-existing

      # 8Ô∏è‚É£ Install ArgoCD
      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd || true
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      # 9Ô∏è‚É£ Expose ArgoCD Server (LoadBalancer)
      - name: Expose ArgoCD Server
        run: |
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

      # üîü Create App Namespace
      - name: Create App Namespace
        run: kubectl create namespace $APP_NAMESPACE || true

      # 1Ô∏è‚É£1Ô∏è‚É£ Add Helm repo
      - name: Add Helm Repo
        run: helm repo add bitnami $HELM_CHART_REPO && helm repo update

      # 1Ô∏è‚É£2Ô∏è‚É£ Deploy sample Helm app
      - name: Deploy Helm App
        run: |
          helm upgrade --install $APP_RELEASE_NAME bitnami/nginx \
            --namespace $APP_NAMESPACE \
            --set service.type=LoadBalancer

      # 1Ô∏è‚É£3Ô∏è‚É£ Optional: Deploy via ArgoCD app manifest
      - name: Create ArgoCD App for Helm Chart
        run: |
          kubectl apply -f - <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: helm-nginx-app
            namespace: argocd
          spec:
            project: default
            source:
              repoURL: $HELM_CHART_REPO
              chart: nginx
              targetRevision: latest
              helm:
                releaseName: nginx-argo
            destination:
              server: https://kubernetes.default.svc
              namespace: $APP_NAMESPACE
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
          EOF
