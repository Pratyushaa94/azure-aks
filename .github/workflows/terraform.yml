name: Deploy to AKS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  RESOURCE_GROUP: dev-rg-aks
  CLUSTER_NAME: dev-aks
  TFSTATE_RG: tfstate-rg
  TFSTATE_STORAGE: prathyusha2025tfstate

jobs:
  deploy:
    runs-on: self-hosted   # your Bastion VM runner

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      # Install Azure CLI
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az version

      # Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -sL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client

      # Install Terraform
      - name: Install Terraform
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install -y terraform
          terraform -version

      # Install Docker
      - name: Install Docker
        run: |
          curl -fsSL https://get.docker.com | sh
          sudo usermod -aG docker $USER
          docker --version

      # Azure Login using AZURE_CREDENTIALS secret
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Connect to AKS
      - name: Connect to AKS
        run: |
          az aks get-credentials -n $CLUSTER_NAME -g $RESOURCE_GROUP --overwrite-existing
          kubectl get nodes

      # Terraform init (with remote backend)
      - name: Terraform Init
        run: |
          terraform init -backend-config="resource_group_name=$TFSTATE_RG" \
                         -backend-config="storage_account_name=$TFSTATE_STORAGE" \
                         -backend-config="container_name=tfstate" \
                         -backend-config="key=infra.terraform.tfstate"

      # (Optional) Terraform Apply
      # - name: Terraform Apply
      #   run: terraform apply -auto-approve

      # (Optional) Helm / ArgoCD / Monitoring Deployment
      # - name: Deploy Apps via Helm
      #   run: |
      #     helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      #     helm repo update
      #     helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack -n monitoring
      #     # Add your Helm app deployment here
